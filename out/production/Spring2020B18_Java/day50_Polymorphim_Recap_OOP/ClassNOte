06/15/2020Topics: Polymorphism ContinueType casting summaryOOP Summarypackage name: day50_polymorphismWarmup tasks:1.  cerate a class Animalvariables: age, gendermethods: eat, sleepDO NOT make them abstract we need this for today's example2.  create subclass of Animal named Catvariable: catNamemethods: scratch3.  create subclass of Animal named Dogvariable: dogNamemethods: barkpolymorphism: objets behaviors in many formsoccurs when parent class/interface is reference to child' objectWebDriver driver= new ChromeDriver();driver.get()Reference type decides what can be called or accessedWebDriver driver = getDriver();getDriver() ==> chrome, firefox, ...if a method is exist in both Object type & ReferenceType:if method is overriden: Object Typeif not: reference TypeIf method is not overridden, it will call parent/super class versionList<WebElement> list = new ArrayList<>();driverType Castings: converting one type to anotherbyte < short < int < long < float < double
Primitive Type Casting: implicit & explicitimplicit casting: smaller type to larger type. automatically doneint a = 100;double b = a;explicit casting: larger type to smaller type. MUST be done manuallyint a = 200;short s = (short) a ;Reference Type Casting: Upcasting & downcastingpre condition: there MUST IS A relationshipupcasting: casting from subclass type to superclass type (done by compiler implicitly)downcasting: casting from a superclass type to subclass type (MUST be done explicitly)OOP: Encapsulation, Inheritance, Abstraction, PolymoprhismEncapsulation: hiding the data by using private, use the public getter/setter to read and modify the private datagetter(Read only): returns the private datasetter(write only): assigning the argument to private variableIF PRIVATE DATA IS FINAL, WE CAN ONLY GENERATE GETTERInheritance: build super & sub class. easy way to get richsuper class: cannot inherit anything from childsub class: can inherit visible variables and visible methods (except constructor) from super classClass   A    extends   Bsub           supermethod overriding: MUST happen in sub classadvantage: less codesreusableeasy to maintain
Abstraction: hiding the implementation detailsConcentrating on essentials/importance, without worrying the detailsWebDriver:get();quit();ChromeDriver implements WebDriver:get(): opens from chromequit(): closes chrome onlyFireFoxDriver implements WebDriver:get(): opens from firefoxquit(): closes firefox onlyOperaDriver implements WebDriver:get(): opens from Operaquit(): closes Opera only...abstract method: method without body/implemntationmeant to be override ( cannot be final, static, private)there are ONLY two ways to achieve abstraction:1.  abstract class: not concrete, cannot create objectmeant to be inherited  ( cannot be final)2.  interface: we can implement multiple interfaces to a class ( cannot be final)everything has public access modifer by defaultwe can only have:varaibles: by default static and finalmethods: abstract method, static method, default methodwe cannot have: constructor, instance variables, instance methods, Blocksextends vs implements:class       extends   classinterfaces  extends   interfaceclass       implements    interfaceclass  extends  class implments I1, I2 